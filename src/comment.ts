import { context, getOctokit } from "@actions/github";
import { getInput } from "@actions/core";

const commentIdentifier = "<!-- generated by jest-code-coverage-commenter -->";

export default async function updateOrCreateComment(content: string, identifier = commentIdentifier): Promise<void> {
    const githubToken = getInput("github-token") || process.env.GITHUB_TOKEN;

    if (!githubToken) {
        throw new Error("Github access token not supplied.");
    }

    const octokit = getOctokit(githubToken);
    const comments = await octokit.issues.listComments({
        repo: context.repo.repo,
        owner: context.repo.owner,
        issue_number: context.payload.number,
    });

    const ourOutdatedComment = comments.data.find((comment) => {
        return comment.body.includes(identifier);
    });

    const requestData = {
        repo: context.repo.repo,
        owner: context.repo.owner,
        body: content + identifier,
    };

    if (ourOutdatedComment !== undefined) {
        await octokit.issues.updateComment({ ...requestData, comment_id: ourOutdatedComment.id });
    } else {
        await octokit.issues.createComment({ ...requestData, issue_number: context.payload.number });
    }
}
